#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-core:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

var io = require('socket.io')(server);
app.set('online_equipments', []);
app.set('online_users', []);
/*------------------------------------------------------------------
| Socket.io Configuration ------------------------------------------
|-----------------------------------------------------------------*/
// var socketRoutes = require('../routes/sockets');
io.on('connection', function(socket) {
    socket.join('iot');
    console.log('Active Sockets : %s', io.sockets.adapter.rooms.iot.length);
    // new socketRoutes(socket);
    //socket.emit('connect', {});
    socket.on('connect_equipment', function(data) {
        console.log(data);
        for (let i = 0; i < app.settings.online_equipments.length; i++) {
            if (app.settings.online_equipments[i].socketid === socket.id) {
                app.settings.online_equipments.splice(i, 1);
            }
        }
        app.settings.online_equipments.push({
            socketid: socket.id,
            equipmentid: data.equipmentid,
            socket:socket
        });
    });
    socket.on('connect_user', function(data) {
        result = JSON.parse(data);
        console.log(result);
        for (let i = 0; i < app.settings.online_users.length; i++) {
            if (app.settings.online_users[i].socketid === socket.id) {
                app.settings.online_users.splice(i, 1);
            }
        }
        
        app.settings.online_users.push({
            socketid: socket.id,
            userid: result.userid,
            socket:socket
        });
    });
    socket.on('disconnect', function(socket) {
        for (let i = 0; i < app.settings.online_users.length; i++) {
            if (app.settings.online_users[i].socketid === socket.id) {
                app.settings.online_users.splice(i, 1);
            }
        }
        for (let i = 0; i < app.settings.online_equipments.length; i++) {
            if (app.settings.online_equipments[i].socketid === socket.id) {
                app.settings.online_equipments.splice(i, 1);
            }
        }
    });
    socket.on('controliot', (data) => {
        result = JSON.parse(data);
        //console.log(result);
        var oeq = app.settings.online_equipments
        for (let i = 0; i < oeq.length; i++) {
            if (oeq[i].equipmentid == result.equipmentid) {
                socket.broadcast.to(oeq[i].socketid).emit('socketaction', result);
                console.log("device emited");
                return
            }
        }
    });
});
